Haskell est un langage de programmation fonctionnel.
Il est fondé sur le lambda-calcul et la logique combinatoire.
Son nom vient du mathématicien et logicien Haskell Brooks Curry.
Il a été créé en 1990 par un comité de chercheurs en théorie des langages intéressés par les langages fonctionnels et l'évaluation paresseuse.
Le dernier standard est Haskell 2010 : c'est une version minimale et portable du langage conçue à des fins pédagogiques et pratiques, dans un souci d'interopérabilité entre les implémentations du langage et comme base de futures extensions.
Le langage continue d'évoluer rapidement, principalement avec GHC, constituant ainsi un standard de facto comprenant de nombreuses extensions.
Les fonctionnalités les plus intéressantes de Haskell sont le support des fonctions récursives, l'inférence de types, les listes en compréhension, l'évaluation paresseuse et les structures de données infinies dont l'exemple phare est le type de donnée stream. Ces fonctionnalités, surtout si on les combine, facilitent l'écriture et l'utilisation de fonctions et la manipulation des données.
Le système de types, objet de nombreuses recherches, est également l'un des plus expressifs et l'un des plus aptes à mettre en œuvre, de façon statique, de nombreuses contraintes ordinairement vérifiées à l'exécution.
Haskell se distingue également par l'utilisation de monades pour les entrées/sorties et pour la gestion des exceptions, rendue nécessaire par l'une des plus importantes spécificités du langage, à savoir que Haskell est un langage fonctionnel pur, ce qui signifie que, de façon inhérente, aucun effet de bord n'est autorisé, ni les entrées/sorties, ni les affectations de variables, ni les exceptions.
La plupart des langages fonctionnels encouragent ce style, mais Haskell l'impose dans tout code qui ne signale pas explicitement par son type qu'il admet des effets de bord et qui grâce à ce mécanisme en prévient et en circonscrit les dangers.
Erlang est un langage de programmation, supportant plusieurs paradigmes : concurrent, temps réel, distribué.
Son cœur séquentiel est un langage fonctionnel à évaluation stricte, affectation unique, au typage dynamique fort.
Sa couche concurrente est fondée sur le modèle d'acteur.
Il possède des fonctionnalités de tolérance aux pannes et de mise à jour du code à chaud, permettant le développement d'applications à très haute disponibilité.
Erlang est conçu pour s'exécuter sur une machine virtuelle spécifique appelée BEAM.
Clojure est un langage de programmation fonctionnel compilé, multi-plateforme et destiné à la création de programmes sûrs et facilement distribuables. C’est un dialecte de Lisp.
Il compile vers du bytecode Java, du code JavaScript et du bytecode .NET.
Clojure est donc disponible sur la JVM, le CLR, les navigateurs et Node.js.
Développement dynamique à l’aide du REPL
Les fonctions sont des objets. La programmation par récursion est favorisée, plutôt que la programmation par boucle à effets de bord. La récursion terminale est supportée via le verbe recur
Séquences évaluées paresseusement
Grande variété de structures de données non mutables et persistantes
Programmation concurrente grâce à la STM, à un système d’agents, et à un système de variables dynamiques
Intégration au langage : en compilant en code binaire pour la Machine virtuelle Java, les applications en Clojure sont préparées et déployées dans la JVM ou un serveur d’application sans difficulté supplémentaire.
Le langage fournit aussi des macros qui facilitent l’usage des API Java existantes.
Les structures de données de Clojure implémentent toutes des interfaces Java standardisées, rendant aisée l’exécution de code écrit en Clojure depuis Java.
Il en va de même avec les autres cibles de compilation.
Python est un langage de programmation objet, multi-paradigme et multiplateformes.
Il favorise la programmation impérative structurée, fonctionnelle et orientée objet.
Il est doté d'un typage dynamique fort, d'une gestion automatique de la mémoire par ramasse-miettes et d'un système de gestion d'exceptions ; il est ainsi similaire à Perl, Ruby, Scheme, Smalltalk et Tcl.
Le langage Python est placé sous une licence libre proche de la licence BSD et fonctionne sur la plupart des plates-formes informatiques, des supercalculateurs aux ordinateurs centraux4, de Windows à Unix en passant par GNU/Linux, Mac OS, ou encore Android, iOS, et aussi avec Java ou encore .NET.
Il est conçu pour optimiser la productivité des programmeurs en offrant des outils de haut niveau et une syntaxe simple à utiliser.
Il est également apprécié par certains pédagogues qui y trouvent un langage où la syntaxe, clairement séparée des mécanismes de bas niveau, permet une initiation aisée aux concepts de base de la programmation.
Contrairement à une opinion répandue, le Lorem Ipsum n'est pas simplement du texte aléatoire.
Il trouve ses racines dans une oeuvre de la littérature latine classique datant de 45 av. J.-C., le rendant vieux de 2000 ans. Un professeur du Hampden-Sydney College, en Virginie, s'est intéressé à un des mots latins les plus obscurs, consectetur, extrait d'un passage du Lorem Ipsum, et en étudiant tous les usages de ce mot dans la littérature classique, découvrit la source incontestable du Lorem Ipsum.
Il provient en fait des sections 1.10.32 et 1.10.33 du "De Finibus Bonorum et Malorum" (Des Suprêmes Biens et des Suprêmes Maux) de Cicéron.
Cet ouvrage, très populaire pendant la Renaissance, est un traité sur la théorie de l'éthique.
Les premières lignes du Lorem Ipsum, "Lorem ipsum dolor sit amet...", proviennent de la section 1.10.32.
Python a été conçu pour être un langage lisible.
Il vise à être visuellement épuré. Par exemple, il possède moins de constructions syntaxiques que de nombreux langages structurés tels que C, Perl, ou Pascal.
Les commentaires sont indiqués par le caractère croisillon (#)
Tous les types de base, les fonctions, les instances de classes (les objets « classiques » des langages C++ et Java) et les classes elles-mêmes (qui sont des instances de méta-classes) sont des objets.
Une classe se définit avec le mot-clé class.
Les classes Python supportent l'héritage multiple ; il n'y a pas de surcharge statique comme en C++, ou de restrictions sur l'héritage comme c'est le cas en java (une classe implémente plusieurs interfaces et hérite d'une seule classe) mais le mécanisme des arguments optionnels et par mot-clé est plus général et plus flexible.
En astrophysique, un trou noir1 est un objet céleste si compact que l'intensité de son champ gravitationnel empêche toute forme de matière ou de rayonnement de s’en échapper.
De tels objets ne peuvent ni émettre, ni réfléchir la lumière et sont donc noirs, ce qui en astronomie revient à dire qu'ils sont invisibles. Toutefois, plusieurs techniques d’observation indirecte dans différentes longueurs d'ondes ont été mises au point et permettent d’étudier les phénomènes qu’ils induisent.
En particulier, la matière happée par un trou noir est chauffée à des températures considérables avant d’être « engloutie » et émet une quantité importante de rayons X.
Envisagée dès le xviiie siècle, dans le cadre de la mécanique classique, leur existence — prédite par la relativité générale — est une certitude pour la quasi-totalité des astrophysiciens et des physiciens théoriciens.
La gravitation étant le seul effet pouvant sortir d'un trou noir, une observation quasi-directe de trous noirs a pu être détaillée en février 2016 par le biais de la première observation directe des ondes gravitationnelles.
Par ailleurs, les trous noirs sont étonnants en ce qu’ils sont décrits par un très petit nombre de paramètres. En effet, leur description, dans l’univers dans lequel nous vivons, ne dépend que de trois paramètres : la masse, la charge électrique et le moment cinétique. Tous les autres paramètres du trou noir (par exemple ses effets sur les corps environnants et leur étendue) sont fixés par ceux-ci. Par comparaison, la description d’une planète fait intervenir des centaines de paramètres (composition chimique, différenciation de ses éléments, convection, atmosphère, etc.). La raison pour laquelle un trou noir n’est décrit que par ces trois paramètres est connue depuis 1967 : c’est le théorème de calvitie démontré par Werner Israel. Celui-ci explique que les seules interactions fondamentales à longue portée étant la gravitation et l’électromagnétisme, les seules propriétés mesurables des trous noirs sont données par les paramètres décrivant ces interactions, à savoir la masse, le moment cinétique et la charge électrique.
Pour un trou noir, la masse et la charge électrique sont des propriétés habituelles que décrit la physique classique (c’est-à-dire non-relativiste) : le trou noir possède un champ gravitationnel proportionnel à sa masse et un champ électrique proportionnel à sa charge. L’influence du moment cinétique est en revanche spécifique à la relativité générale. Celle-ci stipule en effet qu’un corps en rotation va avoir tendance à « entraîner » l’espace-temps dans son voisinage. Ce phénomène, difficilement observable dans le système solaire en raison de son extrême faiblesse pour des astres non compacts, est connu sous le nom d’effet Lense-Thirring (aussi appelé frame dragging, en anglais)Note 3. Il prend une amplitude considérable au voisinage d’un trou noir « en rotation », au point qu’un observateur situé dans son voisinage immédiat serait inévitablement entraîné dans le sens de rotation du trou noir. La région où ceci se produit est appelée ergorégion.
La zone sphérique qui délimite la région d’où lumière et matière ne peuvent s’échapper, est appelée « horizon des événements ». On parle parfois de « surface » du trou noir, quoique le terme soit quelque peu impropre (il ne s’agit pas d’une surface solide ou gazeuse comme la surface d’une planète ou d’une étoile). Il ne s’agit pas d’une région qui présente des caractéristiques particulières : un observateur qui franchirait l’horizon ne ressentirait rien de spécial à ce moment-là (voir ci-dessous). En revanche, il se rendrait compte qu’il ne pourrait plus s’échapper de cette région s’il essayait de faire demi-tour. C’est une sorte de point de non retour. En substance, c’est une situation qui est un peu analogue à celle d’un baigneur qui s’éloignerait de la côte. Si par exemple le baigneur ne peut nager que deux kilomètres, il ne ressentira rien s’il s’éloigne à plus d’un kilomètre de la côte ; mais s’il doit faire demi-tour, il se rendra compte qu’il n’a pas assez d’énergie pour atteindre la rive.
En revanche, un observateur situé au voisinage de l’horizon remarquera que le temps s’écoule différemment pour lui et pour un observateur situé loin du trou noir. Si ce dernier lui envoie des signaux lumineux à intervalles réguliers (par exemple une seconde), alors l’observateur proche du trou noir recevra des signaux plus énergétiques (la fréquence des signaux lumineux sera plus élevée, conséquence du décalage vers le bleu subi par la lumière qui tombe vers le trou noir) et les intervalles de temps séparant deux signaux consécutifs seront plus rapprochés (moins d’une seconde, donc). Cet observateur aura donc l’impression que le temps s’écoule plus vite pour son confrère resté loin du trou noir que pour lui. À l’inverse, l’observateur resté loin du trou noir verra son collègue évoluer de plus en plus lentement, le temps chez celui-ci donnant l’impression de s’écouler plus lentement.
Si l’observateur distant voit un objet tomber dans un trou noir, les deux phénomènes de dilatation du temps et de décalage vers le rouge vont se combiner. Les éventuels signaux émis par l’objet seront de plus en plus rouges, de moins en moins lumineux (la lumière émise perd de plus en plus d’énergie avant d’arriver à l’observateur lointain) et de plus en plus espacés. En pratique, le nombre de photons reçus par l’observateur distant va décroître très rapidement, jusqu’à devenir nul : à ce moment-là, l’objet en train de chuter dans le trou noir est devenu invisible. Même si l’observateur distant tente d’approcher l’horizon en vue de récupérer l’objet qu’il a eu l’impression de voir s’arrêter juste avant l’horizon, celui-ci demeurera invisibleNote 5.
Pour un observateur s’approchant d’une singularité, ce sont les effets de marée qui vont devenir importants. Ces effets, qui déterminent les déformations d’un objet (le corps d’un astronaute, par exemple) du fait des hétérogénéités du champ gravitationnel, seront inéluctablement ressentis par un observateur s’approchant de trop près d’un trou noir ou d’une singularité. La région où ces effets de marée deviennent importants est entièrement située dans l’horizon pour les trous noirs super massifs, mais empiète notablement hors de l’horizon pour des trous noirs stellairesNote 6. Ainsi, un observateur s’approchant d’un trou noir stellaire serait déchiqueté avant de passer l’horizon, alors que le même observateur qui s’approcherait d’un trou noir super massif passerait l’horizon sans encombre. Il serait tout de même inéluctablement détruit par les effets de marée en s’approchant de la singularité.
